{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " * Serving Flask app \"__main__\" (lazy loading)\n",
      " * Environment: production\n",
      "   WARNING: Do not use the development server in a production environment.\n",
      "   Use a production WSGI server instead.\n",
      " * Debug mode: off\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n",
      "127.0.0.1 - - [20/Mar/2019 20:56:18] \"GET / HTTP/1.1\" 200 -\n",
      "127.0.0.1 - - [20/Mar/2019 20:56:20] \"GET /favicon.ico HTTP/1.1\" 404 -\n",
      "127.0.0.1 - - [20/Mar/2019 20:56:51] \"GET /api/v1.0/stations HTTP/1.1\" 200 -\n",
      "[2019-03-20 20:57:05,474] ERROR in app: Exception on /api/v1.0/precipitation [GET]\n",
      "Traceback (most recent call last):\n",
      "  File \"C:\\Users\\ashok\\Anaconda3\\lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1127, in _execute_context\n",
      "    context = constructor(dialect, self, conn, *args)\n",
      "  File \"C:\\Users\\ashok\\Anaconda3\\lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 639, in _init_compiled\n",
      "    self.cursor = self.create_cursor()\n",
      "  File \"C:\\Users\\ashok\\Anaconda3\\lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 954, in create_cursor\n",
      "    return self._dbapi_connection.cursor()\n",
      "  File \"C:\\Users\\ashok\\Anaconda3\\lib\\site-packages\\sqlalchemy\\pool.py\", line 977, in cursor\n",
      "    return self.connection.cursor(*args, **kwargs)\n",
      "sqlite3.ProgrammingError: SQLite objects created in a thread can only be used in that same thread. The object was created in thread id 1464 and this is thread id 17856.\n",
      "\n",
      "The above exception was the direct cause of the following exception:\n",
      "\n",
      "Traceback (most recent call last):\n",
      "  File \"C:\\Users\\ashok\\Anaconda3\\lib\\site-packages\\flask\\app.py\", line 2292, in wsgi_app\n",
      "    response = self.full_dispatch_request()\n",
      "  File \"C:\\Users\\ashok\\Anaconda3\\lib\\site-packages\\flask\\app.py\", line 1815, in full_dispatch_request\n",
      "    rv = self.handle_user_exception(e)\n",
      "  File \"C:\\Users\\ashok\\Anaconda3\\lib\\site-packages\\flask\\app.py\", line 1718, in handle_user_exception\n",
      "    reraise(exc_type, exc_value, tb)\n",
      "  File \"C:\\Users\\ashok\\Anaconda3\\lib\\site-packages\\flask\\_compat.py\", line 35, in reraise\n",
      "    raise value\n",
      "  File \"C:\\Users\\ashok\\Anaconda3\\lib\\site-packages\\flask\\app.py\", line 1813, in full_dispatch_request\n",
      "    rv = self.dispatch_request()\n",
      "  File \"C:\\Users\\ashok\\Anaconda3\\lib\\site-packages\\flask\\app.py\", line 1799, in dispatch_request\n",
      "    return self.view_functions[rule.endpoint](**req.view_args)\n",
      "  File \"<ipython-input-1-a3de8a37e0ae>\", line 61, in precipitation\n",
      "    filter(Measurement.date >= prev_year).all()\n",
      "  File \"C:\\Users\\ashok\\Anaconda3\\lib\\site-packages\\sqlalchemy\\orm\\query.py\", line 2843, in all\n",
      "    return list(self)\n",
      "  File \"C:\\Users\\ashok\\Anaconda3\\lib\\site-packages\\sqlalchemy\\orm\\query.py\", line 2995, in __iter__\n",
      "    return self._execute_and_instances(context)\n",
      "  File \"C:\\Users\\ashok\\Anaconda3\\lib\\site-packages\\sqlalchemy\\orm\\query.py\", line 3018, in _execute_and_instances\n",
      "    result = conn.execute(querycontext.statement, self._params)\n",
      "  File \"C:\\Users\\ashok\\Anaconda3\\lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 948, in execute\n",
      "    return meth(self, multiparams, params)\n",
      "  File \"C:\\Users\\ashok\\Anaconda3\\lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 269, in _execute_on_connection\n",
      "    return connection._execute_clauseelement(self, multiparams, params)\n",
      "  File \"C:\\Users\\ashok\\Anaconda3\\lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1060, in _execute_clauseelement\n",
      "    compiled_sql, distilled_params\n",
      "  File \"C:\\Users\\ashok\\Anaconda3\\lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1132, in _execute_context\n",
      "    None, None)\n",
      "  File \"C:\\Users\\ashok\\Anaconda3\\lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1413, in _handle_dbapi_exception\n",
      "    exc_info\n",
      "  File \"C:\\Users\\ashok\\Anaconda3\\lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 265, in raise_from_cause\n",
      "    reraise(type(exception), exception, tb=exc_tb, cause=cause)\n",
      "  File \"C:\\Users\\ashok\\Anaconda3\\lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 248, in reraise\n",
      "    raise value.with_traceback(tb)\n",
      "  File \"C:\\Users\\ashok\\Anaconda3\\lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1127, in _execute_context\n",
      "    context = constructor(dialect, self, conn, *args)\n",
      "  File \"C:\\Users\\ashok\\Anaconda3\\lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 639, in _init_compiled\n",
      "    self.cursor = self.create_cursor()\n",
      "  File \"C:\\Users\\ashok\\Anaconda3\\lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 954, in create_cursor\n",
      "    return self._dbapi_connection.cursor()\n",
      "  File \"C:\\Users\\ashok\\Anaconda3\\lib\\site-packages\\sqlalchemy\\pool.py\", line 977, in cursor\n",
      "    return self.connection.cursor(*args, **kwargs)\n",
      "sqlalchemy.exc.ProgrammingError: (sqlite3.ProgrammingError) SQLite objects created in a thread can only be used in that same thread. The object was created in thread id 1464 and this is thread id 17856. [SQL: 'SELECT measurement.date AS measurement_date, measurement.prcp AS measurement_prcp \\nFROM measurement \\nWHERE measurement.date >= ?'] [parameters: [{}]] (Background on this error at: http://sqlalche.me/e/f405)\n",
      "127.0.0.1 - - [20/Mar/2019 20:57:05] \"GET /api/v1.0/precipitation HTTP/1.1\" 500 -\n"
     ]
    }
   ],
   "source": [
    "import datetime as dt\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "import sqlalchemy\n",
    "from sqlalchemy.ext.automap import automap_base\n",
    "from sqlalchemy.orm import Session\n",
    "from sqlalchemy import create_engine, func\n",
    "\n",
    "from flask import Flask, jsonify\n",
    "\n",
    "\n",
    "#################################################\n",
    "# Database Setup\n",
    "#################################################\n",
    "engine = create_engine(\"sqlite:///output/hawaii.sqlite\")\n",
    "\n",
    "# reflect an existing database into a new model\n",
    "Base = automap_base()\n",
    "# reflect the tables\n",
    "Base.prepare(engine, reflect=True)\n",
    "\n",
    "# Save reference to the table\n",
    "Measurement = Base.classes.measurement\n",
    "Station = Base.classes.station\n",
    "\n",
    "# Create our session (link) from Python to the DB\n",
    "session = Session(engine)\n",
    "\n",
    "#################################################\n",
    "# Flask Setup\n",
    "#################################################\n",
    "app = Flask(__name__)\n",
    "\n",
    "\n",
    "#################################################\n",
    "# Flask Routes\n",
    "#################################################\n",
    "\n",
    "@app.route(\"/\")\n",
    "def welcome():\n",
    "    return (\n",
    "        f\"Welcome to the Hawaii Climate Analysis API!<br/>\"\n",
    "        f\"Available Routes:<br/>\"\n",
    "        f\"/api/v1.0/precipitation<br/>\"\n",
    "        f\"/api/v1.0/stations<br/>\"\n",
    "        f\"/api/v1.0/tobs<br/>\"\n",
    "        f\"/api/v1.0/start/end\"\n",
    "    )\n",
    "\n",
    "\n",
    "@app.route(\"/api/v1.0/precipitation\")\n",
    "def precipitation():\n",
    "    \"\"\"Return a list of precipitation data for the last year\"\"\"\n",
    "    # Calculate the date 1 year ago from today\n",
    "    prev_year = dt.date.today() - dt.timedelta(days=365)\n",
    "\n",
    "    # Query for the date and precipitation for the last year\n",
    "    precipitation = session.query(Measurement.date, Measurement.prcp).\\\n",
    "        filter(Measurement.date >= prev_year).all()\n",
    "\n",
    "    # Dict with date as the key and prcp as the value\n",
    "    precip = {date: prcp for date, prcp in precipitation}\n",
    "    return jsonify(precip)\n",
    "\n",
    "\n",
    "@app.route(\"/api/v1.0/stations\")\n",
    "def stations():\n",
    "    \"\"\"Return a list of stations.\"\"\"\n",
    "    results = session.query(Station.station).all()\n",
    "\n",
    "    # Unravel results into a 1D array and convert to a list\n",
    "    stations = list(np.ravel(results))\n",
    "    return jsonify(stations)\n",
    "\n",
    "\n",
    "@app.route(\"/api/v1.0/tobs\")\n",
    "def temp_monthly():\n",
    "    \"\"\"Return the temperature observations (tobs) for previous year.\"\"\"\n",
    "    # Calculate the date 1 year ago from today\n",
    "    prev_year = dt.date.today() - dt.timedelta(days=365)\n",
    "\n",
    "    # Query the primary station for all tobs from the last year\n",
    "    results = session.query(Measurement.tobs).\\\n",
    "        filter(Measurement.station == 'USC00519281').\\\n",
    "        filter(Measurement.date >= prev_year).all()\n",
    "\n",
    "    # Unravel results into a 1D array and convert to a list\n",
    "    temps = list(np.ravel(results))\n",
    "\n",
    "    # Return the results\n",
    "    return jsonify(temps)\n",
    "\n",
    "\n",
    "@app.route(\"/api/v1.0/temp/<start>\")\n",
    "@app.route(\"/api/v1.0/temp/<start>/<end>\")\n",
    "def stats(start=None, end=None):\n",
    "    \"\"\"Return TMIN, TAVG, TMAX.\"\"\"\n",
    "\n",
    "    # Select statement\n",
    "    sel = [func.min(Measurement.tobs), func.avg(Measurement.tobs), func.max(Measurement.tobs)]\n",
    "\n",
    "    if not end:\n",
    "        # calculate TMIN, TAVG, TMAX for dates greater than start\n",
    "        results = session.query(*sel).\\\n",
    "            filter(Measurement.date >= start).all()\n",
    "        # Unravel results into a 1D array and convert to a list\n",
    "        temps = list(np.ravel(results))\n",
    "        return jsonify(temps)\n",
    "\n",
    "    # calculate TMIN, TAVG, TMAX with start and stop\n",
    "    results = session.query(*sel).\\\n",
    "        filter(Measurement.date >= start).\\\n",
    "        filter(Measurement.date <= end).all()\n",
    "    # Unravel results into a 1D array and convert to a list\n",
    "    temps = list(np.ravel(results))\n",
    "    return jsonify(temps)\n",
    "\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    app.run()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
